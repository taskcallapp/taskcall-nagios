# This file contains the code to send alerts from Nagios to TaskCall.

import argparse
import json
import logging
import requests


NAGIOS_SERVER = 'default'
INTEGRATION_KEY = ''
TOTAL_TIME = 60
config_parameters = {
    'integration_key': INTEGRATION_KEY,
    'log_path': '/var/log/taskcall-nagios/send_to_taskcall.log',
    'nagios_server': NAGIOS_SERVER,
    'nagios_to_taskcall.logger': 'warning',
    'taskcall.api.url': 'https://integrations.taskcallapp.com/nagios',
    'nagios_to_taskcall.http.proxy.enabled': 'false',
    'nagios_to_taskcall.http.proxy.port': '1111',
    'nagios_to_taskcall.http.proxy.host': 'localhost',
    'nagios_to_taskcall.http.proxy.protocol': 'http',
    'nagios_to_taskcall.http.proxy.username': '',
    'nagios_to_taskcall.http.proxy.password': ''
}
config_path = '/home/taskcall-nagios/nagios_to_taskcall.conf'
cmd_line_arguments = dict()


def override_config_parameters():
    '''
    Reads parameters from the configuration file and override the parameters in the dictionary.
    '''
    try:
        file_reader = open(config_path, 'r')
        file_lines = file_reader.readlines()
        for line in file_lines:
            line = line.strip()
            if '#' not in line and line != '' and len(line) != 0:
                line_split = line.split('=')
                key, value = line_split[0].strip(), line_split[1].strip()
                if key == 'nagios_to_taskcall.timeout':
                    value = int(value)
                config_parameters[key] = value
        file_reader.close()
    except (IOError, ValueError) as e:
        logging.exception(str(e))


def log_config_parameters():
    '''
    Log the configuration parameters.
    '''
    logging.info('Configurations...')
    for item in config_parameters:
        logging.info(item + '=' + config_parameters[item])


def send_post_request():
    '''
    Send a HTTP post request to TaskCall's server to process alerts generated by Nagios.
    '''
    succeeded = False
    attempts = 0

    if cmd_line_arguments['entity_type'] == 'host':
        logging.info('Processing request for - HostName: ' + cmd_line_arguments['host_name'] +
                     ', HostState: ' + cmd_line_arguments['host_state'])
    else:
        logging.info('Processing request for - HostName: ' + cmd_line_arguments['host_name'] +
                     ', ServiceDesc: ' + cmd_line_arguments['service_desc'] + ', ServiceState: ' +
                     cmd_line_arguments['service_state'] + ']')

    while not succeeded and attempts <= 3:
        try:
            attempts += 1
            logging.info('Attempt ' + str(attempts))

            url = config_parameters['taskcall.api.url'] + cmd_line_arguments['integration_key']
            header_params = {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Accept-Language': 'en'
            }
            response = requests.post(url, headers=header_params, data=json.dumps(cmd_line_arguments),
                                     timeout=TOTAL_TIME)

            if response.status_code == 200:
                succeeded = True
                logging.info('Succeeded')
            else:
                logging.error('Failed - Error code ' + str(response.status_code))
                logging.error(response.json())
        except Exception as e:
            logging.exception(str(e))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='send events from Nagios to TaskCall')

    parser.add_argument('integKey', help='Integration key issued by TaskCall')
    parser.add_argument('nagiosServer', default=config_parameters['nagios_server'], help='Nagios server')
    parser.add_argument('logPath', default=config_parameters['log_path'], help='LOGPATH')
    parser.add_argument('entityType')
    parser.add_argument('ntt', help='NOTIFICATIONTYPE')
    parser.add_argument('ldt', help='LONGDATETIME')

    # host related arguments
    parser.add_argument('hn', help='HOSTNAME')
    parser.add_argument('hdn', help='HOSTDISPLAYNAME')
    parser.add_argument('hal', help='HOSTALIAS')
    parser.add_argument('haddr', help='HOSTADDRESS')
    parser.add_argument('hs', help='HOSTSTATE')
    parser.add_argument('hsi', help='HOSTSTATEID')
    parser.add_argument('lhs', help='LASTHOSTSTATE')
    parser.add_argument('lhsi', help='LASTHOSTSTATEID')
    parser.add_argument('hst', help='HOSTSTATETYPE')
    parser.add_argument('ha', help='HOSTATTEMPT')
    parser.add_argument('mha', help='MAXHOSTATTEMPTS')
    parser.add_argument('hei', help='HOSTEVENTID')
    parser.add_argument('lhei', help='LASTHOSTEVENTID')
    parser.add_argument('hpi', help='HOSTPROBLEMID')
    parser.add_argument('lhpi', help='LASTHOSTPROBLEMID')
    parser.add_argument('hl', help='HOSTLATENCY')
    parser.add_argument('het', help='HOSTEXECUTIONTIME')
    parser.add_argument('hd', help='HOSTDURATION')
    parser.add_argument('hds', help='HOSTDURATIONSEC')
    parser.add_argument('hdt', help='HOSTDOWNTIME')
    parser.add_argument('hpc', help='HOSTPERCENTCHANGE')
    parser.add_argument('hgn', help='HOSTGROUPNAME')
    parser.add_argument('hgns', help='HOSTGROUPNAMES')
    parser.add_argument('lhc', help='LASTHOSTCHECK')
    parser.add_argument('lhsc', help='LASTHOSTSTATECHANGE')
    parser.add_argument('lhu', help='LASTHOSTUP')
    parser.add_argument('lhd', help='LASTHOSTDOWN')
    parser.add_argument('lhur', help='LASTHOSTUNREACHABLE')
    parser.add_argument('ho', help='HOSTOUTPUT')
    parser.add_argument('lho', help='LONGHOSTOUTPUT')
    parser.add_argument('hnu', help='HOSTNOTESURL')
    parser.add_argument('hpd', help='HOSTPERFDATA')

    # service related arguments
    parser.add_argument('s', help='SERVICEDESC')
    parser.add_argument('sdn', help='SERVICEDISPLAYNAME')
    parser.add_argument('ss', help='SERVICESTATE')
    parser.add_argument('ssi', help='SERVICESTATEID')
    parser.add_argument('lss', help='LASTSERVICESTATE')
    parser.add_argument('lssi', help='LASTSERVICESTATEID')
    parser.add_argument('sst', help='SERVICESTATETYPE')
    parser.add_argument('sa', help='SERVICEATTEMPT')
    parser.add_argument('msa', help='MAXSERVICEATTEMPTS')
    parser.add_argument('siv', help='SERVICEISVOLATILE')
    parser.add_argument('sei', help='SERVICEEVENTID')
    parser.add_argument('lsei', help='LASTSERVICEEVENTID')
    parser.add_argument('spi', help='SERVICEPROBLEMID')
    parser.add_argument('lspi', help='LASTSERVICEPROBLEMID')
    parser.add_argument('sl', help='SERVICELATENCY')
    parser.add_argument('set', help='SERVICEEXECUTIONTIME')
    parser.add_argument('sd', help='SERVICEDURATION')
    parser.add_argument('sds', help='SERVICEDURATIONSEC')
    parser.add_argument('sdt', help='SERVICEDOWNTIME')
    parser.add_argument('spc', help='SERVICEPERCENTCHANGE')
    parser.add_argument('sgn', help='SERVICEGROUPNAME')
    parser.add_argument('sgns', help='SERVICEGROUPNAMES')
    parser.add_argument('lsch', help='LASTSERVICECHECK')
    parser.add_argument('lssc', help='LASTSERVICESTATECHANGE')
    parser.add_argument('lsok', help='LASTSERVICEOK')
    parser.add_argument('lsw', help='LASTSERVICEWARNING')
    parser.add_argument('lsu', help='LASTSERVICEUNKNOWN')
    parser.add_argument('lsc', help='LASTSERVICECRITICAL')
    parser.add_argument('so', help='SERVICEOUTPUT')
    parser.add_argument('lso', help='LONGSERVICEOUTPUT')
    parser.add_argument('snu', help='SERVICENOTESURL')
    parser.add_argument('spd', help='SERVICEPERFDATA')

    # parse the arguments
    args = parser.parse_args()

    cmd_line_arguments['integration_key'] = args.integKey
    cmd_line_arguments['nagios_server'] = args.nagiosServer
    cmd_line_arguments['log_path'] = args.logPath
    cmd_line_arguments['entity_type'] = args.entityType
    cmd_line_arguments['notification_type'] = args.notificationType
    cmd_line_arguments['long_date_time'] = args.longDateTime

    cmd_line_arguments['host_name'] = args.hostName
    cmd_line_arguments['host_display_name'] = args.hostDisplayName
    cmd_line_arguments['host_alias'] = args.hostAlias
    cmd_line_arguments['host_address'] = args.hostAddress
    cmd_line_arguments['host_state'] = args.hostState
    cmd_line_arguments['host_state_id'] = args.hostStateId
    cmd_line_arguments['last_host_state'] = args.lastHostState
    cmd_line_arguments['last_host_state_id'] = args.lastHostStateId
    cmd_line_arguments['host_state_type'] = args.hostStateType
    cmd_line_arguments['host_attempt'] = args.hostAttempt
    cmd_line_arguments['max_host_attempts'] = args.maxHostAttempts
    cmd_line_arguments['host_event_id'] = args.hostEventId
    cmd_line_arguments['last_host_event_id'] = args.lastHostEventId
    cmd_line_arguments['host_problem_id'] = args.hostProblemId
    cmd_line_arguments['last_host_problem_id'] = args.lastHostProblemId
    cmd_line_arguments['host_latency'] = args.hostLatency
    cmd_line_arguments['host_execution_time'] = args.hostExecutionTime
    cmd_line_arguments['host_duration'] = args.hostDuration
    cmd_line_arguments['host_duration_sec'] = args.hostDurationSec
    cmd_line_arguments['host_down_time'] = args.hostDownTime
    cmd_line_arguments['host_percent_change'] = args.hostPercentChange
    cmd_line_arguments['host_group_name'] = args.hostGroupName
    cmd_line_arguments['host_group_names'] = args.hostGroupNames
    cmd_line_arguments['last_host_check'] = args.lastHostCheck
    cmd_line_arguments['last_host_state_change'] = args.lastHostStateChange
    cmd_line_arguments['last_host_up'] = args.lastHostUp
    cmd_line_arguments['last_host_down'] = args.lastHostDown
    cmd_line_arguments['last_host_unreachable'] = args.lastHostUnreachable
    cmd_line_arguments['host_output'] = args.hostOutput
    cmd_line_arguments['long_host_output'] = args.longHostOutput
    cmd_line_arguments['host_notes_url'] = args.hostNotesUrl
    cmd_line_arguments['host_perf_data'] = args.hostPerfData

    cmd_line_arguments['service_desc'] = args.serviceDesc
    cmd_line_arguments['service_display_name'] = args.serviceDisplayName
    cmd_line_arguments['service_state'] = args.serviceState
    cmd_line_arguments['service_state_id'] = args.serviceStateId
    cmd_line_arguments['last_service_state'] = args.lastServiceState
    cmd_line_arguments['last_service_state_id'] = args.lastServiceStateId
    cmd_line_arguments['service_state_type'] = args.serviceStateType
    cmd_line_arguments['service_attempt'] = args.serviceAttempt
    cmd_line_arguments['max_service_attempts'] = args.maxServiceAttempts
    cmd_line_arguments['service_is_volatile'] = args.serviceIsVolatile
    cmd_line_arguments['service_event_id'] = args.serviceEventId
    cmd_line_arguments['last_service_event_id'] = args.lastServiceEventId
    cmd_line_arguments['service_problem_id'] = args.serviceProblemId
    cmd_line_arguments['last_service_problem_id'] = args.lastServiceProblemId
    cmd_line_arguments['service_latency'] = args.serviceLatency
    cmd_line_arguments['service_execution_time'] = args.serviceExecutionTime
    cmd_line_arguments['service_duration'] = args.serviceDuration
    cmd_line_arguments['service_duration_sec'] = args.serviceDurationSec
    cmd_line_arguments['service_down_time'] = args.serviceDownTime
    cmd_line_arguments['service_percent_change'] = args.servicePercentChange
    cmd_line_arguments['service_group_name'] = args.serviceGroupName
    cmd_line_arguments['service_group_names'] = args.serviceGroupNames
    cmd_line_arguments['last_service_check'] = args.lastServiceCheck
    cmd_line_arguments['last_service_state_change'] = args.lastServiceStateChange
    cmd_line_arguments['last_service_ok'] = args.lastServiceOk
    cmd_line_arguments['last_service_warning'] = args.lastServiceWarning
    cmd_line_arguments['last_service_unknown'] = args.lastServiceUnknown
    cmd_line_arguments['last_service_critical'] = args.lastServiceCritical
    cmd_line_arguments['service_output'] = args.serviceOutput
    cmd_line_arguments['long_service_output'] = args.longServiceOutput
    cmd_line_arguments['service_notes_url'] = args.serviceNotesUrl
    cmd_line_arguments['service_perf_data'] = args.servicePerfData

    # Set up logging
    logging.basicConfig(filename=cmd_line_arguments['log_path'], level=logging.INFO,
                        format='%(asctime)s : %(levelname)s : %(message)s')

    # Override the configuration parameters
    override_config_parameters()

    # Log the configurations
    log_config_parameters()

    if cmd_line_arguments['notification_type'] is None or cmd_line_arguments['notification_type'] == '':
        logging.error('Nagios NOTIFICATIONTYPE parameter is missing. Aborting process.')
    else:
        send_post_request()
